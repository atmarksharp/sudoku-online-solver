Array.prototype.addValues=function(a){a.forEach(function(c,b,d){if(c!==null&&this.indexOf(c)===-1){this.push(c)}},this)};Array.prototype.removeValues=function(a){a.forEach(function(c,b,d){if(c!==null&&this.indexOf(c)!==-1){this.splice(this.indexOf(c),1)}},this)};function logSudokuBoard(d){var c;var e;var b;var a;for(c=0;c<9;c+=1){if(c===3||c===6){console.log("---------------------")}b=d[c];a=[];e=0;for(e=0;e<9;e+=1){if(e===3||e===6){a.push("|")}a.push((b[e].getValue()||" "))}console.log(a.join(" "))}}function printSudokuBoard(e){var d;var f;var c;var a;var b;for(d=0;d<9;d+=1){c=e[d];f=0;for(f=0;f<9;f+=1){$("#row"+d+" td.column"+f).text((c[f].getValue()||""))}}}function loadSudokuBoard(){$("#valuesremoved").remove();myBoard=makeBoard();var c=false;var b=[0,1,2,3,4,5,6,7,8];var a=[0,1,2,3,4,5,6,7,8];b.forEach(function(f,e,d){a.forEach(function(g,k,i){var j=$("#row"+f+" td.column"+g);var h=Number($(j).text());if(!isNaN(h)&&h>0&&h<10){myBoard[f][g].setValue(h)}else{c=true;$(j).text("")}})});if(c===true){$("#solveparagraph").after("<p id='valuesremoved'>If there were values that were not numbers 0-9, they were removed</p>")}}var makeRow=function(c){var b={};var a;for(a=0;a<9;a+=1){b[a]=makeSquare(c,a,getBoxNumber(c,a),(arguments[a+1]?arguments[a+1].getValue():null))}b.getAllValues=function(){var d=[];for(a=0;a<9;a+=1){d.addValues([b[a].getValue()])}return d};b.clone=function(){return makeRow(c,b[0].clone(),b[1].clone(),b[2].clone(),b[3].clone(),b[4].clone(),b[5],b[6].clone(),b[7].clone(),b[8].clone())};return b};function getBoxNumber(a,b){if(a>=0&&a<=2){if(b>=0&&b<=2){return 0}else{if(b>=3&&b<=5){return 1}else{if(b>=6&&b<=8){return 2}else{throw {name:"LengthError",message:"A column should be between 0 and 8"}}}}}else{if(a>=3&&a<=5){if(b>=0&&b<=2){return 3}else{if(b>=3&&b<=5){return 4}else{if(b>=6&&b<=8){return 5}else{throw {name:"LengthError",message:"A column should be between 0 and 8"}}}}}else{if(a>=6&&a<=8){if(b>=0&&b<=2){return 6}else{if(b>=3&&b<=5){return 7}else{if(b>=6&&b<=8){return 8}else{throw {name:"LengthError",message:"A column should be between 0 and 8"}}}}}else{throw {name:"LengthError",message:"A row should be between 0 and 8"}}}}}var makeBoard=function(){var b={};var a;for(a=0;a<9;a+=1){b[a]=(arguments[a]||makeRow(a))}b.getRowValues=function(c){return b[c].getAllValues()};b.getColumnValues=function(d){var c=[];for(a=0;a<9;a+=1){c.addValues([b[a][d].getValue()])}return c};b.getBoxRows=function(c){var d=[];if(c>=0&&c<3){d=[0,1,2]}else{if(c>=3&&c<6){d=[3,4,5]}else{if(c>=6&&c<=8){d=[6,7,8]}else{throw {name:"UnknownError",message:"An unknown error occured when finding box values"}}}}return d};b.getBoxColumns=function(d){var c=[];if(d%3===0){c=[0,1,2]}else{if(d%3===1){c=[3,4,5]}else{if(d%3===2){c=[6,7,8]}else{throw {name:"UnknownError",message:"An unknown error occured when finding box values"}}}}return c};b.getBoxValues=function(e){var d=[];var c=b.getBoxColumns(e);var f=b.getBoxRows(e);f.forEach(function(i,h,g){c.forEach(function(j,l,k){d.addValues([b[i][j].getValue()])})});return d};b.clone=function(){return makeBoard(b[0].clone(),b[1].clone(),b[2].clone(),b[3].clone(),b[4].clone(),b[5],b[6].clone(),b[7].clone(),b[8].clone())};b.getFilledCount=function(){var e=[0,1,2,3,4,5,6,7,8];var d=[0,1,2,3,4,5,6,7,8];var c=0;e.forEach(function(h,g,f){d.forEach(function(i,k,j){if(b[h][i].getValue()){c+=1}})});return c};return b};var makeSquare=function(e,a,c,d){var b={};var f=undefined;b.getRow=function(){return e};b.getColumn=function(){return a};b.getBox=function(){return c};b.getValue=function(){return d};b.setValue=function(g){d=g};b.getPossibleValues=function(){if(d!==null){throw {name:"AlreadySetError",message:"This box is already set."}}else{return f}};b.findPossibleValues=function(g){if(d!==null){throw {name:"AlreadySetError",message:"This box is already set."}}else{f=[1,2,3,4,5,6,7,8,9];f.removeValues(g.getRowValues(e));f.removeValues(g.getColumnValues(a));f.removeValues(g.getBoxValues(c));if(f.length===0){throw {name:"ImpossibleBoardError",message:"Something is wrong, this board is impossible",trace:(function(){var h=new Error();return h.stack})()}}return f}};b.clone=function(){return makeSquare(e,a,c,d)};return b};var solveSudokuBoard=function(l){var p=[0,1,2,3,4,5,6,7,8];var d=[0,1,2,3,4,5,6,7,8];var h=[0,1,2,3,4,5,6,7,8];var j=l.getFilledCount();console.log(j+" squares filled to begin");function f(){p.forEach(function(s,r,i){var q=[];d.forEach(function(u,w,v){var t=l[s][u].getValue();if(t){if(q.indexOf(t)!==-1){throw {name:"ImpossibleBoardError"}}else{q.push(t)}}})});d.forEach(function(q,s,r){var i=[];d.forEach(function(w,u,t){var v=l[w][q].getValue();if(v){if(i.indexOf(v)!==-1){throw {name:"ImpossibleBoardError"}}else{i.push(v)}}})});var e=[0,1,2,3,4,5,6,7,8];e.forEach(function(s,u,r){var q=l.getBoxColumns(s);var t=l.getBoxRows(s);var i=[];t.forEach(function(x,w,v){q.forEach(function(z,B,A){var y=l[x][z].getValue();if(y){if(i.indexOf(y)!==-1){throw {name:"ImpossibleBoardError"}}else{i.push(y)}}})})})}function a(){p.forEach(function(q,i,e){d.forEach(function(r,v,s){try{var u=l[q][r].findPossibleValues(l)}catch(t){var u=undefined}if(u&&u.length===1){l[q][r].setValue(u[0]);j+=1}})})}function m(e){p.forEach(function(s,r,q){var i=[];d.forEach(function(t,x,u){try{var w=l[s][t].findPossibleValues(l)}catch(v){var w=undefined}if(w&&w.indexOf(e)!==-1){i.push([s,t])}});if(i.length===1){l[i[0][0]][i[0][1]].setValue(e);j+=1}})}function o(e){d.forEach(function(q,s,r){var i=[];p.forEach(function(w,u,t){try{var x=l[w][q].findPossibleValues(l)}catch(v){var x=undefined}if(x&&x.indexOf(e)!==-1){i.push([w,q])}});if(i.length===1){l[i[0][0]][i[0][1]].setValue(e);j+=1}})}function b(i){var e=[0,1,2,3,4,5,6,7,8];e.forEach(function(t,v,s){var r=l.getBoxColumns(t);var u=l.getBoxRows(t);var q=[];u.forEach(function(y,x,w){r.forEach(function(z,D,A){try{var C=l[y][z].findPossibleValues(l)}catch(B){var C=undefined}if(C&&C.indexOf(i)!==-1){q.push([y,z])}})});if(q.length===1){l[q[0][0]][q[0][1]].setValue(i);j+=1}})}var n=0;var c=0;while(n!==j&&j<81){n=j;try{f();a();var g;for(g=1;g<10;g+=1){m(g);o(g);b(g);console.log(j+" squares filled")}c+=1}catch(k){if(k.name==="ImpossibleBoardError"){alert("This board is not possible.  Make sure that no numbers are repeated in boxes, rows, or columns.");n=j}else{throw k}}}console.log(c+" iterations run");if(j===81){return true}else{return false}};var myBoard=makeBoard();function loadHardPuzzle(){myBoard[0][8].setValue(7);myBoard[1][0].setValue(1);myBoard[1][3].setValue(8);myBoard[1][6].setValue(5);myBoard[2][1].setValue(2);myBoard[2][2].setValue(5);myBoard[2][3].setValue(4);myBoard[2][8].setValue(1);myBoard[3][2].setValue(7);myBoard[3][3].setValue(3);myBoard[3][5].setValue(8);myBoard[4][0].setValue(5);myBoard[4][2].setValue(3);myBoard[4][3].setValue(7);myBoard[4][5].setValue(1);myBoard[4][6].setValue(2);myBoard[4][8].setValue(9);myBoard[5][3].setValue(5);myBoard[5][5].setValue(6);myBoard[5][6].setValue(7);myBoard[6][0].setValue(2);myBoard[6][5].setValue(4);myBoard[6][6].setValue(9);myBoard[6][7].setValue(5);myBoard[7][2].setValue(8);myBoard[7][5].setValue(9);myBoard[7][8].setValue(4);myBoard[8][0].setValue(3)}function loadMediumPuzzle(){myBoard[0][1].setValue(5);myBoard[0][2].setValue(7);myBoard[0][6].setValue(4);myBoard[0][8].setValue(2);myBoard[1][0].setValue(9);myBoard[1][3].setValue(3);myBoard[1][6].setValue(1);myBoard[2][1].setValue(6);myBoard[2][2].setValue(8);myBoard[2][6].setValue(5);myBoard[2][7].setValue(9);myBoard[3][1].setValue(1);myBoard[3][4].setValue(8);myBoard[3][5].setValue(2);myBoard[4][0].setValue(6);myBoard[4][8].setValue(9);myBoard[5][3].setValue(1);myBoard[5][4].setValue(5);myBoard[5][7].setValue(7);myBoard[6][1].setValue(7);myBoard[6][2].setValue(3);myBoard[6][6].setValue(6);myBoard[6][7].setValue(5);myBoard[7][2].setValue(6);myBoard[7][5].setValue(4);myBoard[7][8].setValue(1);myBoard[8][0].setValue(8);myBoard[8][2].setValue(1);myBoard[8][6].setValue(9);myBoard[8][7].setValue(2)}function loadEasyPuzzle(){myBoard[0][0].setValue(3);myBoard[0][1].setValue(7);myBoard[0][2].setValue(6);myBoard[0][6].setValue(2);myBoard[0][8].setValue(4);myBoard[1][1].setValue(2);myBoard[1][3].setValue(6);myBoard[1][4].setValue(3);myBoard[1][5].setValue(7);myBoard[1][6].setValue(5);myBoard[2][0].setValue(9);myBoard[2][3].setValue(2);myBoard[2][4].setValue(8);myBoard[2][6].setValue(7);myBoard[2][7].setValue(6);myBoard[3][1].setValue(1);myBoard[3][3].setValue(8);myBoard[3][4].setValue(6);myBoard[3][5].setValue(3);myBoard[3][7].setValue(9);myBoard[4][0].setValue(2);myBoard[4][1].setValue(4);myBoard[4][5].setValue(5);myBoard[4][7].setValue(3);myBoard[4][8].setValue(6);myBoard[5][1].setValue(8);myBoard[5][2].setValue(3);myBoard[5][5].setValue(9);myBoard[5][6].setValue(1);myBoard[5][8].setValue(7);myBoard[6][0].setValue(4);myBoard[6][2].setValue(8);myBoard[6][3].setValue(5);myBoard[6][4].setValue(9);myBoard[6][6].setValue(6);myBoard[7][0].setValue(1);myBoard[7][2].setValue(7);myBoard[7][3].setValue(3);myBoard[7][7].setValue(2);myBoard[7][8].setValue(5);myBoard[8][2].setValue(2);myBoard[8][4].setValue(1);myBoard[8][5].setValue(6);myBoard[8][7].setValue(4);myBoard[8][8].setValue(8)}function solve_sudoku(c){var a=makeBoard();for(var b=0;b<c.length;b++){var d=c[b];a[d.y][d.x].setValue(d.val)}loadSudokuBoard(a);solveSudokuBoard(a);return a};